<?php

namespace Inspecciones\InspeccionesBundle\Repository;

/**
 * InspeccionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdenInspeccionRepository extends \Doctrine\ORM\EntityRepository
{
    public function listInspeccionarCadaVencido($idArea,$fecha)
    {       
        $comuna;

        if($fecha){
            $fecha = " and (ultimaInspeccionEstablecimiento(e.id) between '1990-01-01' and  '".$fecha."' )";
        }else{
            $fecha = '';
        }

        if($idArea == 2){
          $comuna = 'and d.comuna in (12,13,14,15)';
        }elseif($idArea == 1){
          $comuna = 'and d.comuna in (4,8)';
        }elseif($idArea == 3){
          $comuna = 'and d.comuna in (1,2,3,5,6)';
        }elseif($idArea == 4){
          $comuna = 'and d.comuna in (7,9,10,11)';
        }else{
          $comuna ='';
        }

        $query = "SELECT DISTINCT e.id, (SELECT lon FROM direccion where Id_Establecimiento = e.id ORDER BY id LIMIT 1) as Lon, (SELECT lat FROM direccion where Id_Establecimiento = e.id ORDER BY id LIMIT 1) as Lat,e.Id_Rubro_Principal FROM establecimiento AS e INNER JOIN rubro_principal as r on r.id = e.Id_Rubro_Principal INNER JOIN direccion as d on e.id = d.Id_Establecimiento WHERE (SELECT count(*) from orden_inspeccion as o INNER JOIN inspeccion as i on o.id = i.orden_inspeccion_id
                      WHERE i.fecha_programado is not null and i.fecha_inspeccion is null and (o.eliminada  = 0 or o.eliminada is null) and (o.anulada = 0 or o.anulada is null)
                    and o.establecimiento_id=e.id AND i.fecha_programado > (DATE(NOW()) - INTERVAL 1 MONTH)
              
            ) < 1 AND
            (
                ultimaInspeccionEstablecimiento(e.id) < (DATE(NOW()) - INTERVAL 6 MONTH) OR
                
                (SELECT count(*) FROM acta_utilizada as u
                INNER JOIN acta as a on u.id = a.id
                INNER JOIN orden_inspeccion as o on o.id = a.id_inspeccion
                WHERE u.fechaInspeccion between (DATE(NOW()) - INTERVAL 6 MONTH) and DATE(NOW()) and o.establecimiento_id = e.id) > 1 

                OR
                
                (SELECT count(*) FROM faja as f
                  INNER JOIN orden_inspeccion as o on o.id = f.id_inspeccion
                  WHERE f.fecha_inspeccion between (DATE(NOW()) - INTERVAL 6 MONTH) and DATE(NOW()) and o.establecimiento_id = e.id ) > 1
            )


              AND ADDDATE(DATE_FORMAT(ULTIMAINSPECCIONESTABLECIMIENTO(e.id),'%Y-%m-%d'), INTERVAL r.Frecuencia DAY) <= NOW() ".$comuna.$fecha;

        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();       
    }

    public function nuncaInspeccionada($idArea,$fecha)
    {       
        $comuna;
        

        if($idArea == 2){
          $comuna = 'and d.comuna in (12,13,14,15)';
        }elseif($idArea == 1){
          $comuna = 'and d.comuna in (4,8)';
        }elseif($idArea == 3){
          $comuna = 'and d.comuna in (1,2,3,5,6)';
        }elseif($idArea == 4){
          $comuna = 'and d.comuna in (7,9,10,11)';
        }else{
          $comuna ='';
        }

        $query = "SELECT DISTINCT e.id, (SELECT lon FROM direccion where Id_Establecimiento = e.id ORDER BY id LIMIT 1) as Lon, (SELECT lat FROM direccion where Id_Establecimiento = e.id ORDER BY id LIMIT 1) as Lat,e.Id_Rubro_Principal FROM establecimiento AS e INNER JOIN rubro_principal as r on r.id = e.Id_Rubro_Principal INNER JOIN direccion as d on e.id = d.Id_Establecimiento WHERE (SELECT count(*) from orden_inspeccion as o INNER JOIN inspeccion as i on o.id = i.orden_inspeccion_id
                      WHERE i.fecha_programado is not null and i.fecha_inspeccion is null and (o.eliminada  = 0 or o.eliminada is null) and (o.anulada = 0 or o.anulada is null)
                    and o.establecimiento_id=e.id AND i.fecha_programado > (DATE(NOW()) - INTERVAL 1 MONTH)
              
              ) < 1 AND ULTIMAINSPECCIONESTABLECIMIENTO(e.id) is null and r.Frecuencia < 32767 ".$comuna;

        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();       
  }



    public function findByChecklistSap($Checklist,$Sap)
    {    
        $em=$this->getEntityManager();

        $where="";

        if($Checklist!=0 and !is_null($Checklist)){
            $where.="WHERE o.checklist=".$Checklist." ";
        }

        if($Sap!=0 and !is_null($Sap)){
            if($Checklist!=0 and !is_null($Checklist)){
                $where.="AND o.idSap=".$Sap." ";
            }else{      
                $where.="OR o.idSap=".$Sap." ";
            }
        }

        $dql="SELECT o FROM InspeccionesInspeccionesBundle:OrdenInspeccion o  ".$where."";

        $consulta=$em->createQuery($dql);   

        return $consulta->getResult();
    }

    public function findInspeccionesSinAnuladarPorEstablecimiento($establecimiento)
    {
        $id = $establecimiento->getId();        

        $qb = $this->createQueryBuilder('o')
        ->where('o.establecimiento = :id and (o.eliminada is null or o.eliminada = 0)')
        ->setParameter('id',$id)
        ->orderBy('o.checklist','DESC')
        ;
        
        return $qb->getQuery()->getResult();        
    }

    public function existeCheck($OrdenInspeccion)
    {
        $checklist = $OrdenInspeccion->getChecklist();

        if(is_null($checklist)){            
            return false;
        }

        $qb = $this->createQueryBuilder('o')
        ->where('o.checklist = :checklist and o.id <> :id and (o.eliminada is null or o.eliminada = 0)')
        ->setParameter('checklist',$checklist)
        ->setParameter('id',$OrdenInspeccion->getId())
        ;
        
        $resultado =  $qb->getQuery()->getResult();

        if(count($resultado) == 0){
            return false;
        }else{
            return true;
        }  
    }

    public function existeIdSap($OrdenInspeccion)
    {
        $idSap = $OrdenInspeccion->getIdSap();

        if(is_null($idSap)){
            return false;
        }

        $qb = $this->createQueryBuilder('o')
        ->where('o.idSap = :idSap and o.id <> :id and (o.eliminada is null or o.eliminada = 0)')
        ->setParameter('idSap',$idSap)
        ->setParameter('id',$OrdenInspeccion->getId())
        ;
        
        $resultado =  $qb->getQuery()->getResult();

        if(count($resultado) > 0){
            return true;
        }else{
            return false;
        }  
    }

    public function listReInspeccionarNoVinculada($idArea)
    {
        $qb = $this->createQueryBuilder('o')
        ->select('DISTINCT o.id, d.lon, d.lat,o.idSap, o.checklist')
        ->join('o.direcciones','d')        
        ->where('o.reinspeccionar  = 1 and o.area = :area')
        ->setParameter('area', $idArea);

        return $qb->getQuery()->getResult();
    }

    public function listReProgramadaNoVinculada($idArea)
    {
        $qb = $this->createQueryBuilder('o')
        ->select('DISTINCT o.id, d.lon, d.lat,o.idSap, o.checklist')
        ->join('o.direcciones','d')
        ->join('o.inspecciones','i')
        ->where('o.area = :area and (o.completa = 0 or o.completa is null) and (o.anulada = 0 or o.anulada is null) and 
            (o.eliminada = 0 or o.eliminada is null) and DATE_DIFF(CURRENT_DATE(),o.primerFechaProgramado) <= 30 and i.fechaInspeccion is null and DATE_DIFF(CURRENT_DATE(),i.fechaProgramado) >=7 ')
        ->setParameter('area', $idArea);

        return $qb->getQuery()->getResult();
    }

    public function listaOrdenDeInspeccionesxId($idOrdenProgramacion)
    {
        $query = 'SELECT 
                    oi.id,
                    oi.id_sap,
                    oi.checklist,
                    ci.circuito,
                    oi.observaciones,
                    oi.realizada,
                    oi.establecimiento_id
                    FROM orden_inspeccion as oi
                    LEFT JOIN circuito as ci on oi.circuito_id=ci.id
                    WHERE oi.id = '.$idOrdenProgramacion;
                
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();   
      }

      public function listaInspeccionesxId($idOrdenProgramacion)
      {
        $query = 'SELECT 
                    i.fecha_programado,
                    i.fecha_inspeccion,
                    i.fecha_recepcion,
                    CONCAT(us.apellido," ",us.nombre) AS inspector
                    FROM inspeccion as i
                    JOIN inspeccion_usuario as iu on iu.inspeccion_id=i.id
                    JOIN usuarios as us on us.id=iu.usuario_id
                    WHERE i.orden_inspeccion_id = '.$idOrdenProgramacion;
                
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();   
      }

      public function listaActas($idOrdenProgramacion)
      {
        $query = "SELECT 
                        'acta' as tipo,
                        a.id, 
                        CONCAT(a.Serie,'-',a.Numero) AS numero
                    FROM orden_inspeccion as o JOIN acta as a on o.id = a.id_inspeccion
                    WHERE o.id = ".$idOrdenProgramacion."

                    UNION 

                    SELECT 
                        'faja' as tipo,
                        f.id, 
                        f.Numero AS numero
                    FROM orden_inspeccion as o JOIN faja as f on o.id = f.id_inspeccion 
                    WHERE o.id = ".$idOrdenProgramacion;
                
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();   
     }

    public function listaOrdenesParaRealizar($idInspector)
    {
        $fechaHoy = date("Y-m-d");
        $fechaInicio = date("Y-m-d",strtotime("$fechaHoy   -30 day"));

        if(date("D") == "Fri"){
            $fechaFin = date("Y-m-d",strtotime("$fechaHoy   +3 day"));
        }else{
            $fechaFin = date("Y-m-d",strtotime("$fechaHoy   +1 day"));
        }

        
        $fechaFinRevision = date("Y-m-d",strtotime("$fechaHoy   +9 day"));

        
        $qb = $this->createQueryBuilder('o')
        ->join('o.inspecciones','i')
        ->where(' o.inspeccionPorTablet = 1 and (o.anulada is null or o.anulada = false ) and (o.completa is null or o.completa = 0 ) and (o.vinculado is null or o.vinculado = false ) and o.checklist is not null and o.idUsuarioEliminador is null and o.autorizacion = 1 and i.fechaInspeccion is null and :idInspector MEMBER OF i.inspectores and i.fechaProgramado = (SELECT max(f.fechaProgramado) FROM Inspecciones\InspeccionesBundle\Entity\Inspeccion f where f.ordenInspeccion = o.id )
            and (i.fechaProgramado between :fechaInicio AND :fechaFin or (i.fechaProgramado between :fechaInicio AND :fechaFinRevision AND o.revisionTablet = 1))')
        ->setParameter('idInspector', $idInspector)
        ->setParameter('fechaInicio', $fechaInicio)
        ->setParameter('fechaFin', $fechaFin)
        ->setParameter('fechaFinRevision', $fechaFinRevision)
        ;       
        
        return  $qb->getQuery()->getResult();
    }

    public function numeroCheckInspeccionesRealizadasxEstablecimiento($idEstablecimiento)
     {
         $qb = $this->createQueryBuilder('o')
             ->select('o.checklist, o.idSap, o.fechaInspeccionCompleta')
             ->where('o.realizada = true and o.establecimiento = :idEstablecimiento and o.fechaInspeccionCompleta IS NOT NULL')
             ->orderBy('o.checklist', 'DESC')
             ->setParameter('idEstablecimiento', $idEstablecimiento)
             ->setMaxResults(1);

         return  $qb->getQuery()->getResult();
    }

    public function listaOrdenesParaRealizarTabletNuevo($idInspector)
    {
        $fechaHoy = date("Y-m-d");
        $fechaInicio = date("Y-m-d",strtotime("$fechaHoy   -3 day"));

        if(date("D") == "Fri"){
            $fechaFin = date("Y-m-d",strtotime("$fechaHoy   +5 day"));
        }else{
            $fechaFin = date("Y-m-d",strtotime("$fechaHoy   +3 day"));
        }


        $fechaFinRevision = date("Y-m-d",strtotime("$fechaHoy   +9 day"));


        $qb = $this->createQueryBuilder('o')
            ->join('o.inspecciones','i')
            ->where(' o.inspeccionPorTablet = 1 and (o.anulada is null or o.anulada = false ) and (o.completa is null or o.completa = 0 ) and (o.vinculado is null or o.vinculado = false ) and o.checklist is not null and o.idUsuarioEliminador is null and o.autorizacion = 1 and i.fechaInspeccion is null and :idInspector MEMBER OF i.inspectores and i.fechaProgramado = (SELECT max(f.fechaProgramado) FROM Inspecciones\InspeccionesBundle\Entity\Inspeccion f where f.ordenInspeccion = o.id )
            and (i.fechaProgramado between :fechaInicio AND :fechaFin or (i.fechaProgramado between :fechaInicio AND :fechaFinRevision AND o.revisionTablet = 1))')
            ->setParameter('idInspector', $idInspector)
            ->setParameter('fechaInicio', $fechaInicio)
            ->setParameter('fechaFin', $fechaFin)
            ->setParameter('fechaFinRevision', $fechaFinRevision)
        ;

        return  $qb->getQuery()->getResult();
    }

     public function actasLabradasxEstablecimiento($idEstablecimiento)
     {
        $qb = $this->createQueryBuilder('o')
        ->select('a.serie,a.numero,m.motivoCompleto,o.checklist')
        ->join('o.actas','a')
        ->join('a.ActaUtilizada','am')
        ->join('am.actaMotivo','m')
        ->where('o.realizada = true and o.establecimiento = :idEstablecimiento')
        ->setParameter('idEstablecimiento', $idEstablecimiento)
        ;

        return  $qb->getQuery()->getResult();
     }

    public function inspeccionesSinDevolver($idArea = 0)
    {
        $hoy = getdate();
        $date =date('Y-m-d', strtotime($hoy['year']."-".$hoy['mon']."-".$hoy['mday']. " -1 months"));

        $qb = $this->createQueryBuilder('o')
        ->join('o.inspecciones','i')
        ->where("i.fechaInspeccion is null and (o.anulada is null or o.anulada = 0) and o.checklist is not null and o.primerFechaProgramado between '2016-12-31' and '".$date."' ")
        ->orderBy('o.checklist','ASC');

        if($idArea > 0){
            $qb->andWhere('o.area ='.$idArea);
        }

        return  $qb->getQuery()->getResult();
    }

    public function maxCheckList()
    {
        $qb = $this->createQueryBuilder('o')
        ->select('MAX(o.checklist)')
        ->orderBy('o.checklist', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function inspeccionesEntreFecha($fechaInicial,$fechaFinal,$area)
    {
            $query = "SELECT count(*) FROM notificaciones.inspeccion as i".
                " inner join orden_inspeccion as o on o.id = i.orden_inspeccion_id".
                " where fecha_inspeccion between '".$fechaInicial."' and '".$fechaFinal."' and area_id =".$area;
            $stmt = $this->getEntityManager()->getConnection()->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll();
    }

    public function programadasEntreFecha($fechaInicial,$fechaFinal,$area)
    {
            $query = "SELECT count(*) FROM notificaciones.inspeccion as i".
                " inner join orden_inspeccion as o on o.id = i.orden_inspeccion_id".
                " where fecha_programado between '".$fechaInicial."' and '".$fechaFinal."' and area_id =".$area;
            $stmt = $this->getEntityManager()->getConnection()->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll();
    }

    public function alertaReInspeccion($idArea)
    {
        if($idArea == 7){
          $extra = "(m.gofa is null or m.gofa = 0)";
        }else{
          $extra = "m.gofa = 1 and o.area_id =".$idArea;
        }        

        $query = 'SELECT m.id,o.checklist,REPLACE(SUBSTRING(CONCAT(IFNULL(fnEstablecimientoDomicilios(o.establecimiento_id),""),IFNULL(fnOrdenInspeccionDomiciliosProvisorios(o.id),"")),1,25),"<br>","") as direccion FROM orden_inspeccion AS o INNER JOIN circuito AS c ON o.circuito_id = c.id INNER JOIN area AS a ON o.area_id = a.id INNER JOIN motivos_re_inspeccion as m on m.orden_inspeccion_id = o.id and m.id = (SELECT max(id) FROM motivos_re_inspeccion WHERE orden_inspeccion_id = o.id) WHERE o.reinspeccionar = 1  AND o.checklist > 0 AND (o.eliminada IS NULL OR o.eliminada = 0) AND (o.anulada = 0 OR o.anulada IS NULL) AND (m.desestimar_reinspeccion = 0 OR m.desestimar_reinspeccion IS NULL) and '.$extra;


        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function inspeccionesSinCerrar()
    {       
        $hoy = getdate();
        $date =date('Y-m-d', strtotime($hoy['year']."-".$hoy['mon']."-".$hoy['mday']. " -1 months"));

        $qb = $this->createQueryBuilder('o')
        ->join('o.inspecciones','i')
        ->where("o.checklist > 0 AND (o.eliminada IS NULL OR o.eliminada = 0) AND (o.anulada = 0 OR o.anulada IS NULL) AND (i.fechaInspeccion IS NULL OR o.establecimiento IS NULL OR o.establecimiento = 0) AND o.idSap IS NOT NULL AND o.completa = 1 and (o.cerradaAutomaticamente = 0 or o.cerradaAutomaticamente is null) and o.checklist = 95357588")
        ;

        return  $qb->getQuery()->getResult();
        
    }

    public function cumplirIntimacionesAnteriores($idEstablecimiento,$checklist)
    {
        $query = 'UPDATE orden_inspeccion as o INNER JOIN inspecciones_resultados as i on i.orden_inspeccion_id = o.id
        INNER JOIN inspecciones_respuestas as re ON i.id = re.resultado_id SET o.cumplioIntimacion = 1 WHERE o.establecimiento_id = '.$idEstablecimiento.' AND o.checklist < '.$checklist.' AND i.grupo_id = 18 AND i.pregunta_id = 355 AND re.respuesta_id = 1 AND (o.anulada = 0 OR o.anulada IS NULL)';

        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
    }

    public function intimacionInmediataVencida($idArea,$fecha)
    {
        if($idArea == 7){
            $area = '';
        }else{
            $area = ' AND o.area_id = '.$idArea;   
        }
        if($fecha){
            $fecha = " AND i.fecha_inspeccion <'".$fecha."'";
        }else{
            $fecha = '';
        }

        $query = 'SELECT DISTINCT o.establecimiento_id as id, d.lon, d.lat from orden_inspeccion as o
                INNER JOIN direccion as d on o.establecimiento_id = d.Id_Establecimiento
                INNER JOIN inspecciones_resultados as r ON o.id = r.orden_inspeccion_id
                INNER JOIN inspecciones_respuestas as re ON r.id = re.resultado_id
                INNER JOIN inspeccion as i on o.id = i.orden_inspeccion_id
                WHERE r.grupo_id = 18 AND r.pregunta_id = 355 AND re.respuesta_id = 1 AND (o.cumplioIntimacion = 0 OR o.cumplioIntimacion is null) AND (o.anulada = 0 OR o.anulada IS NULL) AND (o.eliminada IS NULL OR o.eliminada = 0) AND i.fecha_inspeccion < DATE_ADD(CURDATE(), INTERVAL 35 DAY)'.$area.$fecha
                ;
       
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function crearIntimacionInmediata($idOrdenInspeccion,$checklist){
        $query = 'SELECT Count(*) as resultado FROM inspecciones_resultados as i 
        INNER JOIN inspecciones_respuestas as r ON i.id = r.resultado_id 
        WHERE i.pregunta_id = 355 AND r.respuesta_id = 1 AND i.orden_inspeccion_id = '.$idOrdenInspeccion;

        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $resultado = $stmt->fetchAll();

        $query = 'SELECT Count(*) as resultado from cedula where numero = '.($checklist * (-1));
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $resultadoCedulo = $stmt->fetchAll();

        if($resultado[0]['resultado'] == 1 && $resultadoCedulo[0]['resultado'] == 0){
            return true;
        }else{
            return false;
        }
    }

}